
OTA_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002a24  08002a24  00003a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b24  08002b24  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b2c  08002b2c  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b2c  08002b2c  00003b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b30  08002b30  00003b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002b34  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e8  20000010  08002b44  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  08002b44  000048f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c31  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204a  00000000  00000000  0000cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0000ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000698  00000000  00000000  0000f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172db  00000000  00000000  0000fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba24  00000000  00000000  00026eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082294  00000000  00000000  0003290f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4ba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002130  00000000  00000000  000b4be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b6d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a0c 	.word	0x08002a0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002a0c 	.word	0x08002a0c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000160:	4b06      	ldr	r3, [pc, #24]	@ (800017c <MX_CRC_Init+0x20>)
 8000162:	4a07      	ldr	r2, [pc, #28]	@ (8000180 <MX_CRC_Init+0x24>)
 8000164:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000166:	4805      	ldr	r0, [pc, #20]	@ (800017c <MX_CRC_Init+0x20>)
 8000168:	f000 fd3f 	bl	8000bea <HAL_CRC_Init>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d001      	beq.n	8000176 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000172:	f000 fa1b 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	2000002c 	.word	0x2000002c
 8000180:	40023000 	.word	0x40023000

08000184 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a09      	ldr	r2, [pc, #36]	@ (80001b8 <HAL_CRC_MspInit+0x34>)
 8000192:	4293      	cmp	r3, r2
 8000194:	d10b      	bne.n	80001ae <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000196:	4b09      	ldr	r3, [pc, #36]	@ (80001bc <HAL_CRC_MspInit+0x38>)
 8000198:	695b      	ldr	r3, [r3, #20]
 800019a:	4a08      	ldr	r2, [pc, #32]	@ (80001bc <HAL_CRC_MspInit+0x38>)
 800019c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80001a0:	6153      	str	r3, [r2, #20]
 80001a2:	4b06      	ldr	r3, [pc, #24]	@ (80001bc <HAL_CRC_MspInit+0x38>)
 80001a4:	695b      	ldr	r3, [r3, #20]
 80001a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80001aa:	60fb      	str	r3, [r7, #12]
 80001ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001ae:	bf00      	nop
 80001b0:	3714      	adds	r7, #20
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	40023000 	.word	0x40023000
 80001bc:	40021000 	.word	0x40021000

080001c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c6:	f107 0308 	add.w	r3, r7, #8
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001d4:	4b17      	ldr	r3, [pc, #92]	@ (8000234 <MX_GPIO_Init+0x74>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a16      	ldr	r2, [pc, #88]	@ (8000234 <MX_GPIO_Init+0x74>)
 80001da:	f043 0320 	orr.w	r3, r3, #32
 80001de:	6193      	str	r3, [r2, #24]
 80001e0:	4b14      	ldr	r3, [pc, #80]	@ (8000234 <MX_GPIO_Init+0x74>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	f003 0320 	and.w	r3, r3, #32
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ec:	4b11      	ldr	r3, [pc, #68]	@ (8000234 <MX_GPIO_Init+0x74>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a10      	ldr	r2, [pc, #64]	@ (8000234 <MX_GPIO_Init+0x74>)
 80001f2:	f043 0304 	orr.w	r3, r3, #4
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <MX_GPIO_Init+0x74>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f003 0304 	and.w	r3, r3, #4
 8000200:	603b      	str	r3, [r7, #0]
 8000202:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2120      	movs	r1, #32
 8000208:	480b      	ldr	r0, [pc, #44]	@ (8000238 <MX_GPIO_Init+0x78>)
 800020a:	f001 f941 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800020e:	2320      	movs	r3, #32
 8000210:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000212:	2301      	movs	r3, #1
 8000214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021a:	2302      	movs	r3, #2
 800021c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	4619      	mov	r1, r3
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <MX_GPIO_Init+0x78>)
 8000226:	f000 ffaf 	bl	8001188 <HAL_GPIO_Init>

}
 800022a:	bf00      	nop
 800022c:	3718      	adds	r7, #24
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	40010800 	.word	0x40010800

0800023c <Flash_EraseMemory>:
        }
    }

    HAL_FLASH_Lock();  // 플래시 메모리 락
}
void Flash_EraseMemory(uint32_t start_address, uint32_t numberOfPages) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();  // 플래시 메모리 언락
 8000246:	f000 fe0f 	bl	8000e68 <HAL_FLASH_Unlock>

    // 플래시 메모리 지우기 설정
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
    EraseInitStruct.PageAddress = start_address;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbPages = numberOfPages;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	61fb      	str	r3, [r7, #28]

    // 전체 메모리 지우기
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 800025a:	f107 020c 	add.w	r2, r7, #12
 800025e:	f107 0310 	add.w	r3, r7, #16
 8000262:	4611      	mov	r1, r2
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fee7 	bl	8001038 <HAL_FLASHEx_Erase>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <Flash_EraseMemory+0x3a>
        // 오류 처리
        HAL_FLASH_Lock();
 8000270:	f000 fe20 	bl	8000eb4 <HAL_FLASH_Lock>
 8000274:	e001      	b.n	800027a <Flash_EraseMemory+0x3e>
        return;
    }

    HAL_FLASH_Lock();  // 플래시 메모리 락
 8000276:	f000 fe1d 	bl	8000eb4 <HAL_FLASH_Lock>
}
 800027a:	3720      	adds	r7, #32
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <StartFirmwareUpdate>:
}
void ProcessChunkData(uint8_t *chunk_data, uint32_t chunk_size) {
    // 청크 데이터를 플래시에 쓰기
    Flash_WriteChunk((uint32_t *)chunk_data, chunk_size);
}
void StartFirmwareUpdate() {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    // 1. 플래시 메모리 지우기 (시작 시 1회)
    Flash_EraseMemory(TARGET_START_ADDRESS, NUMBER_OF_PAGES);
 8000284:	211e      	movs	r1, #30
 8000286:	4802      	ldr	r0, [pc, #8]	@ (8000290 <StartFirmwareUpdate+0x10>)
 8000288:	f7ff ffd8 	bl	800023c <Flash_EraseMemory>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	08010000 	.word	0x08010000

08000294 <Flash_WriteData>:


//********************
void Flash_WriteData(uint8_t *data, uint32_t size) {
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 800029e:	f000 fde3 	bl	8000e68 <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < size; i += 4) {
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	e032      	b.n	800030e <Flash_WriteData+0x7a>
        uint32_t word = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i];
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3303      	adds	r3, #3
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	061a      	lsls	r2, r3, #24
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	3302      	adds	r3, #2
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	440b      	add	r3, r1
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	041b      	lsls	r3, r3, #16
 80002c0:	431a      	orrs	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	3301      	adds	r3, #1
 80002c6:	6879      	ldr	r1, [r7, #4]
 80002c8:	440b      	add	r3, r1
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	021b      	lsls	r3, r3, #8
 80002ce:	4313      	orrs	r3, r2
 80002d0:	6879      	ldr	r1, [r7, #4]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	440a      	add	r2, r1
 80002d6:	7812      	ldrb	r2, [r2, #0]
 80002d8:	4313      	orrs	r3, r2
 80002da:	60bb      	str	r3, [r7, #8]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, current_flash_address, word) != HAL_OK) {
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <Flash_WriteData+0x8c>)
 80002de:	6819      	ldr	r1, [r3, #0]
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2200      	movs	r2, #0
 80002e4:	461c      	mov	r4, r3
 80002e6:	4615      	mov	r5, r2
 80002e8:	4622      	mov	r2, r4
 80002ea:	462b      	mov	r3, r5
 80002ec:	2002      	movs	r0, #2
 80002ee:	f000 fd4b 	bl	8000d88 <HAL_FLASH_Program>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d002      	beq.n	80002fe <Flash_WriteData+0x6a>
            HAL_FLASH_Lock();
 80002f8:	f000 fddc 	bl	8000eb4 <HAL_FLASH_Lock>
            return;
 80002fc:	e00d      	b.n	800031a <Flash_WriteData+0x86>
        }
        current_flash_address += 4;
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <Flash_WriteData+0x8c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3304      	adds	r3, #4
 8000304:	4a06      	ldr	r2, [pc, #24]	@ (8000320 <Flash_WriteData+0x8c>)
 8000306:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < size; i += 4) {
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3304      	adds	r3, #4
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	429a      	cmp	r2, r3
 8000314:	d3c8      	bcc.n	80002a8 <Flash_WriteData+0x14>
    }

    HAL_FLASH_Lock();
 8000316:	f000 fdcd 	bl	8000eb4 <HAL_FLASH_Lock>
}
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bdb0      	pop	{r4, r5, r7, pc}
 8000320:	20000000 	.word	0x20000000

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000328:	f000 facc 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032c:	f000 f864 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000330:	f7ff ff46 	bl	80001c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000334:	f000 f9b8 	bl	80006a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000338:	f000 f9e0 	bl	80006fc <MX_USART2_UART_Init>
  MX_CRC_Init();
 800033c:	f7ff ff0e 	bl	800015c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &uart_buffer[data_index], 1);
 8000340:	4b22      	ldr	r3, [pc, #136]	@ (80003cc <main+0xa8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a22      	ldr	r2, [pc, #136]	@ (80003d0 <main+0xac>)
 8000346:	4413      	add	r3, r2
 8000348:	2201      	movs	r2, #1
 800034a:	4619      	mov	r1, r3
 800034c:	4821      	ldr	r0, [pc, #132]	@ (80003d4 <main+0xb0>)
 800034e:	f001 fda2 	bl	8001e96 <HAL_UART_Receive_IT>

  send_command("AT\r\n");
 8000352:	4821      	ldr	r0, [pc, #132]	@ (80003d8 <main+0xb4>)
 8000354:	f000 f914 	bl	8000580 <send_command>
  HAL_Delay(2000);
 8000358:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800035c:	f000 fb14 	bl	8000988 <HAL_Delay>
  StartFirmwareUpdate();
 8000360:	f7ff ff8e 	bl	8000280 <StartFirmwareUpdate>
  send_command("AT+CWQAP\r\n");
 8000364:	481d      	ldr	r0, [pc, #116]	@ (80003dc <main+0xb8>)
 8000366:	f000 f90b 	bl	8000580 <send_command>
  HAL_Delay(1000); // Disconnect any previous connection
 800036a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800036e:	f000 fb0b 	bl	8000988 <HAL_Delay>

  send_command("AT+RST\r\n");
 8000372:	481b      	ldr	r0, [pc, #108]	@ (80003e0 <main+0xbc>)
 8000374:	f000 f904 	bl	8000580 <send_command>
  HAL_Delay(2000); // Reset the module
 8000378:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800037c:	f000 fb04 	bl	8000988 <HAL_Delay>

  // Connect to Wi-Fi network
  send_command("AT+CWJAP=\"Atom2_4GHz\",\"atom1234!\"\r\n");
 8000380:	4818      	ldr	r0, [pc, #96]	@ (80003e4 <main+0xc0>)
 8000382:	f000 f8fd 	bl	8000580 <send_command>
  HAL_Delay(5000);  // Adjust delay if connection takes longer
 8000386:	f241 3088 	movw	r0, #5000	@ 0x1388
 800038a:	f000 fafd 	bl	8000988 <HAL_Delay>

  // Confirm IP address
  send_command("AT+CIFSR\r\n");
 800038e:	4816      	ldr	r0, [pc, #88]	@ (80003e8 <main+0xc4>)
 8000390:	f000 f8f6 	bl	8000580 <send_command>
  HAL_Delay(1000); // Request IP address
 8000394:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000398:	f000 faf6 	bl	8000988 <HAL_Delay>

  // Start TCP connection to Flask server
  send_command("AT+CIPSTART=\"TCP\",\"192.168.0.60\",5000\r\n");
 800039c:	4813      	ldr	r0, [pc, #76]	@ (80003ec <main+0xc8>)
 800039e:	f000 f8ef 	bl	8000580 <send_command>
  HAL_Delay(2000);
 80003a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003a6:	f000 faef 	bl	8000988 <HAL_Delay>

  // Send GET request to /test endpoint
  send_command("AT+CIPSEND=55\r\n"); // Adjust the byte length based on request string
 80003aa:	4811      	ldr	r0, [pc, #68]	@ (80003f0 <main+0xcc>)
 80003ac:	f000 f8e8 	bl	8000580 <send_command>
  HAL_Delay(1000);
 80003b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003b4:	f000 fae8 	bl	8000988 <HAL_Delay>

  // Send HTTP GET request
  send_command("GET /download/firmware HTTP/1.1\r\nHost: 192.168.0.60\r\n\r\n");
 80003b8:	480e      	ldr	r0, [pc, #56]	@ (80003f4 <main+0xd0>)
 80003ba:	f000 f8e1 	bl	8000580 <send_command>
  HAL_Delay(20000); // Wait for server response
 80003be:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80003c2:	f000 fae1 	bl	8000988 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c6:	bf00      	nop
 80003c8:	e7fd      	b.n	80003c6 <main+0xa2>
 80003ca:	bf00      	nop
 80003cc:	20000834 	.word	0x20000834
 80003d0:	20000034 	.word	0x20000034
 80003d4:	20000840 	.word	0x20000840
 80003d8:	08002a24 	.word	0x08002a24
 80003dc:	08002a2c 	.word	0x08002a2c
 80003e0:	08002a38 	.word	0x08002a38
 80003e4:	08002a44 	.word	0x08002a44
 80003e8:	08002a68 	.word	0x08002a68
 80003ec:	08002a74 	.word	0x08002a74
 80003f0:	08002a9c 	.word	0x08002a9c
 80003f4:	08002aac 	.word	0x08002aac

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b090      	sub	sp, #64	@ 0x40
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2228      	movs	r2, #40	@ 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fad4 	bl	80029b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041a:	2302      	movs	r3, #2
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000422:	2310      	movs	r3, #16
 8000424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000426:	2300      	movs	r3, #0
 8000428:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	4618      	mov	r0, r3
 8000430:	f001 f846 	bl	80014c0 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800043a:	f000 f8b7 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fab4 	bl	80019c4 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000462:	f000 f8a3 	bl	80005ac <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3740      	adds	r7, #64	@ 0x40
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_UART_RxCpltCallback>:
        // Re-enable UART interrupt for the next byte
        HAL_UART_Receive_IT(&huart1, &uart_buffer[data_index], 1);
    }
}
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    static const char start_pattern[] = ":020000040800F2";
    if (huart->Instance == USART1) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a37      	ldr	r2, [pc, #220]	@ (800055c <HAL_UART_RxCpltCallback+0xec>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d168      	bne.n	8000554 <HAL_UART_RxCpltCallback+0xe4>
        uint8_t received_byte = uart_buffer[data_index++];
 8000482:	4b37      	ldr	r3, [pc, #220]	@ (8000560 <HAL_UART_RxCpltCallback+0xf0>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	4935      	ldr	r1, [pc, #212]	@ (8000560 <HAL_UART_RxCpltCallback+0xf0>)
 800048a:	600a      	str	r2, [r1, #0]
 800048c:	4a35      	ldr	r2, [pc, #212]	@ (8000564 <HAL_UART_RxCpltCallback+0xf4>)
 800048e:	5cd3      	ldrb	r3, [r2, r3]
 8000490:	73fb      	strb	r3, [r7, #15]

        // 본문 시작 확인
        if (!is_body) {
 8000492:	4b35      	ldr	r3, [pc, #212]	@ (8000568 <HAL_UART_RxCpltCallback+0xf8>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	f083 0301 	eor.w	r3, r3, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d022      	beq.n	80004e6 <HAL_UART_RxCpltCallback+0x76>
            if (received_byte == start_pattern[match_index]) {
 80004a0:	4b32      	ldr	r3, [pc, #200]	@ (800056c <HAL_UART_RxCpltCallback+0xfc>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b32      	ldr	r3, [pc, #200]	@ (8000570 <HAL_UART_RxCpltCallback+0x100>)
 80004a8:	5c9b      	ldrb	r3, [r3, r2]
 80004aa:	7bfa      	ldrb	r2, [r7, #15]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d116      	bne.n	80004de <HAL_UART_RxCpltCallback+0x6e>
                match_index++;
 80004b0:	4b2e      	ldr	r3, [pc, #184]	@ (800056c <HAL_UART_RxCpltCallback+0xfc>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	4b2c      	ldr	r3, [pc, #176]	@ (800056c <HAL_UART_RxCpltCallback+0xfc>)
 80004ba:	701a      	strb	r2, [r3, #0]
                if (match_index == sizeof(start_pattern) - 1) {
 80004bc:	4b2b      	ldr	r3, [pc, #172]	@ (800056c <HAL_UART_RxCpltCallback+0xfc>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b0f      	cmp	r3, #15
 80004c2:	d13e      	bne.n	8000542 <HAL_UART_RxCpltCallback+0xd2>
                    is_body = true;      // 본문 시작 플래그 설정
 80004c4:	4b28      	ldr	r3, [pc, #160]	@ (8000568 <HAL_UART_RxCpltCallback+0xf8>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
                    data_index = 0;      // 데이터 인덱스 초기화
 80004ca:	4b25      	ldr	r3, [pc, #148]	@ (8000560 <HAL_UART_RxCpltCallback+0xf0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
                    match_index = 0;     // 매칭 인덱스 초기화
 80004d0:	4b26      	ldr	r3, [pc, #152]	@ (800056c <HAL_UART_RxCpltCallback+0xfc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
                    hex_data_index = 0;  // hex_data_buffer 인덱스 초기화
 80004d6:	4b27      	ldr	r3, [pc, #156]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	e031      	b.n	8000542 <HAL_UART_RxCpltCallback+0xd2>
                }
            } else {
                match_index = 0;  // 매칭 실패 시 다시 처음부터 매칭 시도
 80004de:	4b23      	ldr	r3, [pc, #140]	@ (800056c <HAL_UART_RxCpltCallback+0xfc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	e02d      	b.n	8000542 <HAL_UART_RxCpltCallback+0xd2>
            }
        } else {
            // 본문 데이터 읽기
            if (received_byte == '\n' || received_byte == '\r') {
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	2b0a      	cmp	r3, #10
 80004ea:	d002      	beq.n	80004f2 <HAL_UART_RxCpltCallback+0x82>
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	2b0d      	cmp	r3, #13
 80004f0:	d10d      	bne.n	800050e <HAL_UART_RxCpltCallback+0x9e>
                // 데이터 라인 끝에 도달했을 때 처리
                if (hex_data_index > 0) {
 80004f2:	4b20      	ldr	r3, [pc, #128]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d023      	beq.n	8000542 <HAL_UART_RxCpltCallback+0xd2>
                    Flash_WriteData(hex_data_buffer, hex_data_index);
 80004fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4619      	mov	r1, r3
 8000500:	481d      	ldr	r0, [pc, #116]	@ (8000578 <HAL_UART_RxCpltCallback+0x108>)
 8000502:	f7ff fec7 	bl	8000294 <Flash_WriteData>
                    hex_data_index = 0;
 8000506:	4b1b      	ldr	r3, [pc, #108]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
                if (hex_data_index > 0) {
 800050c:	e019      	b.n	8000542 <HAL_UART_RxCpltCallback+0xd2>
                }
            } else if (received_byte == ':' && hex_data_index == 0) {
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	2b3a      	cmp	r3, #58	@ 0x3a
 8000512:	d107      	bne.n	8000524 <HAL_UART_RxCpltCallback+0xb4>
 8000514:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d103      	bne.n	8000524 <HAL_UART_RxCpltCallback+0xb4>
                // 새 라인 시작 시 첫 번째 ':' 문자 무시
                // 주소 오프셋을 무시하고 데이터만 저장하기 위해 별도 처리
                data_index = 0;
 800051c:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <HAL_UART_RxCpltCallback+0xf0>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	e00e      	b.n	8000542 <HAL_UART_RxCpltCallback+0xd2>
            } else if (hex_data_index >= 9) {
 8000524:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b08      	cmp	r3, #8
 800052a:	d90a      	bls.n	8000542 <HAL_UART_RxCpltCallback+0xd2>
                // ":10"과 주소 오프셋 이후의 실제 데이터만 저장
                hex_data_buffer[hex_data_index - 9] = received_byte;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3b09      	subs	r3, #9
 8000532:	4911      	ldr	r1, [pc, #68]	@ (8000578 <HAL_UART_RxCpltCallback+0x108>)
 8000534:	7bfa      	ldrb	r2, [r7, #15]
 8000536:	54ca      	strb	r2, [r1, r3]
                hex_data_index++;
 8000538:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <HAL_UART_RxCpltCallback+0x104>)
 8000540:	6013      	str	r3, [r2, #0]
            }
        }

        // 다음 바이트 수신 준비
        HAL_UART_Receive_IT(&huart1, &uart_buffer[data_index], 1);
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <HAL_UART_RxCpltCallback+0xf0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a07      	ldr	r2, [pc, #28]	@ (8000564 <HAL_UART_RxCpltCallback+0xf4>)
 8000548:	4413      	add	r3, r2
 800054a:	2201      	movs	r2, #1
 800054c:	4619      	mov	r1, r3
 800054e:	480b      	ldr	r0, [pc, #44]	@ (800057c <HAL_UART_RxCpltCallback+0x10c>)
 8000550:	f001 fca1 	bl	8001e96 <HAL_UART_Receive_IT>
    }
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40013800 	.word	0x40013800
 8000560:	20000834 	.word	0x20000834
 8000564:	20000034 	.word	0x20000034
 8000568:	2000083c 	.word	0x2000083c
 800056c:	2000083d 	.word	0x2000083d
 8000570:	08002ae8 	.word	0x08002ae8
 8000574:	20000838 	.word	0x20000838
 8000578:	20000434 	.word	0x20000434
 800057c:	20000840 	.word	0x20000840

08000580 <send_command>:
    // Reset data_index to start fresh on the next callback
    data_index = 0;
}

void send_command(const char* command)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff fddf 	bl	800014c <strlen>
 800058e:	4603      	mov	r3, r0
 8000590:	b29a      	uxth	r2, r3
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <send_command+0x28>)
 800059a:	f001 fbf1 	bl	8001d80 <HAL_UART_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000840 	.word	0x20000840

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <Error_Handler+0x8>

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 f970 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000678:	4802      	ldr	r0, [pc, #8]	@ (8000684 <USART1_IRQHandler+0x10>)
 800067a:	f001 fc31 	bl	8001ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000840 	.word	0x20000840

08000688 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800068c:	4802      	ldr	r0, [pc, #8]	@ (8000698 <USART2_IRQHandler+0x10>)
 800068e:	f001 fc27 	bl	8001ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000888 	.word	0x20000888

0800069c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <MX_USART1_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f001 fafe 	bl	8001ce0 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ea:	f7ff ff5f 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000840 	.word	0x20000840
 80006f8:	40013800 	.word	0x40013800

080006fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_USART2_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000734:	f001 fad4 	bl	8001ce0 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f7ff ff35 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000888 	.word	0x20000888
 800074c:	40004400 	.word	0x40004400

08000750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a3f      	ldr	r2, [pc, #252]	@ (8000868 <HAL_UART_MspInit+0x118>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d13a      	bne.n	80007e6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000770:	4b3e      	ldr	r3, [pc, #248]	@ (800086c <HAL_UART_MspInit+0x11c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a3d      	ldr	r2, [pc, #244]	@ (800086c <HAL_UART_MspInit+0x11c>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b3b      	ldr	r3, [pc, #236]	@ (800086c <HAL_UART_MspInit+0x11c>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b38      	ldr	r3, [pc, #224]	@ (800086c <HAL_UART_MspInit+0x11c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a37      	ldr	r2, [pc, #220]	@ (800086c <HAL_UART_MspInit+0x11c>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b35      	ldr	r3, [pc, #212]	@ (800086c <HAL_UART_MspInit+0x11c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	4619      	mov	r1, r3
 80007b4:	482e      	ldr	r0, [pc, #184]	@ (8000870 <HAL_UART_MspInit+0x120>)
 80007b6:	f000 fce7 	bl	8001188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4828      	ldr	r0, [pc, #160]	@ (8000870 <HAL_UART_MspInit+0x120>)
 80007d0:	f000 fcda 	bl	8001188 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2025      	movs	r0, #37	@ 0x25
 80007da:	f000 f9d0 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007de:	2025      	movs	r0, #37	@ 0x25
 80007e0:	f000 f9e9 	bl	8000bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007e4:	e03c      	b.n	8000860 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <HAL_UART_MspInit+0x124>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d137      	bne.n	8000860 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <HAL_UART_MspInit+0x11c>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	4a1d      	ldr	r2, [pc, #116]	@ (800086c <HAL_UART_MspInit+0x11c>)
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fa:	61d3      	str	r3, [r2, #28]
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <HAL_UART_MspInit+0x11c>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <HAL_UART_MspInit+0x11c>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a17      	ldr	r2, [pc, #92]	@ (800086c <HAL_UART_MspInit+0x11c>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HAL_UART_MspInit+0x11c>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000820:	2304      	movs	r3, #4
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	4619      	mov	r1, r3
 8000832:	480f      	ldr	r0, [pc, #60]	@ (8000870 <HAL_UART_MspInit+0x120>)
 8000834:	f000 fca8 	bl	8001188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000838:	2308      	movs	r3, #8
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	4619      	mov	r1, r3
 800084a:	4809      	ldr	r0, [pc, #36]	@ (8000870 <HAL_UART_MspInit+0x120>)
 800084c:	f000 fc9c 	bl	8001188 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2026      	movs	r0, #38	@ 0x26
 8000856:	f000 f992 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800085a:	2026      	movs	r0, #38	@ 0x26
 800085c:	f000 f9ab 	bl	8000bb6 <HAL_NVIC_EnableIRQ>
}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	@ 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40013800 	.word	0x40013800
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800
 8000874:	40004400 	.word	0x40004400

08000878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000878:	f7ff ff10 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800087e:	490c      	ldr	r1, [pc, #48]	@ (80008b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000880:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a09      	ldr	r2, [pc, #36]	@ (80008b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000894:	4c09      	ldr	r4, [pc, #36]	@ (80008bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f002 f88f 	bl	80029c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff fd3d 	bl	8000324 <main>
  bx lr
 80008aa:	4770      	bx	lr
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008b4:	08002b34 	.word	0x08002b34
  ldr r2, =_sbss
 80008b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008bc:	200008f8 	.word	0x200008f8

080008c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_Init+0x28>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <HAL_Init+0x28>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f947 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff fe6a 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40022000 	.word	0x40022000

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f95f 	bl	8000bd2 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 f927 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000004 	.word	0x20000004
 8000948:	2000000c 	.word	0x2000000c
 800094c:	20000008 	.word	0x20000008

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_IncTick+0x1c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x20>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a03      	ldr	r2, [pc, #12]	@ (8000970 <HAL_IncTick+0x20>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	2000000c 	.word	0x2000000c
 8000970:	200008d0 	.word	0x200008d0

08000974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b02      	ldr	r3, [pc, #8]	@ (8000984 <HAL_GetTick+0x10>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	200008d0 	.word	0x200008d0

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff fff0 	bl	8000974 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <HAL_Delay+0x44>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffe0 	bl	8000974 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
  {
  }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000000c 	.word	0x2000000c

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4906      	ldr	r1, [pc, #24]	@ (8000a68 <__NVIC_EnableIRQ+0x34>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	@ (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	@ (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	@ 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	@ 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff90 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff2d 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff42 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff90 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5f 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff35 	bl	8000a34 <__NVIC_EnableIRQ>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffa2 	bl	8000b24 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e00e      	b.n	8000c1a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fab9 	bl	8000184 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d008      	beq.n	8000c4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e020      	b.n	8000c8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 020e 	bic.w	r2, r2, #14
 8000c5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0201 	bic.w	r2, r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c74:	2101      	movs	r1, #1
 8000c76:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d005      	beq.n	8000cbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e051      	b.n	8000d60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 020e 	bic.w	r2, r2, #14
 8000cca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0201 	bic.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a22      	ldr	r2, [pc, #136]	@ (8000d6c <HAL_DMA_Abort_IT+0xd4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d029      	beq.n	8000d3a <HAL_DMA_Abort_IT+0xa2>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a21      	ldr	r2, [pc, #132]	@ (8000d70 <HAL_DMA_Abort_IT+0xd8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d022      	beq.n	8000d36 <HAL_DMA_Abort_IT+0x9e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d74 <HAL_DMA_Abort_IT+0xdc>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d01a      	beq.n	8000d30 <HAL_DMA_Abort_IT+0x98>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <HAL_DMA_Abort_IT+0xe0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d012      	beq.n	8000d2a <HAL_DMA_Abort_IT+0x92>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <HAL_DMA_Abort_IT+0xe4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d00a      	beq.n	8000d24 <HAL_DMA_Abort_IT+0x8c>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <HAL_DMA_Abort_IT+0xe8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d102      	bne.n	8000d1e <HAL_DMA_Abort_IT+0x86>
 8000d18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d1c:	e00e      	b.n	8000d3c <HAL_DMA_Abort_IT+0xa4>
 8000d1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d22:	e00b      	b.n	8000d3c <HAL_DMA_Abort_IT+0xa4>
 8000d24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d28:	e008      	b.n	8000d3c <HAL_DMA_Abort_IT+0xa4>
 8000d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2e:	e005      	b.n	8000d3c <HAL_DMA_Abort_IT+0xa4>
 8000d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d34:	e002      	b.n	8000d3c <HAL_DMA_Abort_IT+0xa4>
 8000d36:	2310      	movs	r3, #16
 8000d38:	e000      	b.n	8000d3c <HAL_DMA_Abort_IT+0xa4>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <HAL_DMA_Abort_IT+0xec>)
 8000d3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	4798      	blx	r3
    } 
  }
  return status;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40020008 	.word	0x40020008
 8000d70:	4002001c 	.word	0x4002001c
 8000d74:	40020030 	.word	0x40020030
 8000d78:	40020044 	.word	0x40020044
 8000d7c:	40020058 	.word	0x40020058
 8000d80:	4002006c 	.word	0x4002006c
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000da2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <HAL_FLASH_Program+0xd8>)
 8000da4:	7e1b      	ldrb	r3, [r3, #24]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d101      	bne.n	8000dae <HAL_FLASH_Program+0x26>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e054      	b.n	8000e58 <HAL_FLASH_Program+0xd0>
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <HAL_FLASH_Program+0xd8>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000db4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000db8:	f000 f8a8 	bl	8000f0c <FLASH_WaitForLastOperation>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000dc0:	7dfb      	ldrb	r3, [r7, #23]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d144      	bne.n	8000e50 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d102      	bne.n	8000dd2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	757b      	strb	r3, [r7, #21]
 8000dd0:	e007      	b.n	8000de2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d102      	bne.n	8000dde <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	757b      	strb	r3, [r7, #21]
 8000ddc:	e001      	b.n	8000de2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000dde:	2304      	movs	r3, #4
 8000de0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	75bb      	strb	r3, [r7, #22]
 8000de6:	e02d      	b.n	8000e44 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000de8:	7dbb      	ldrb	r3, [r7, #22]
 8000dea:	005a      	lsls	r2, r3, #1
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	eb02 0c03 	add.w	ip, r2, r3
 8000df2:	7dbb      	ldrb	r3, [r7, #22]
 8000df4:	0119      	lsls	r1, r3, #4
 8000df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dfa:	f1c1 0620 	rsb	r6, r1, #32
 8000dfe:	f1a1 0020 	sub.w	r0, r1, #32
 8000e02:	fa22 f401 	lsr.w	r4, r2, r1
 8000e06:	fa03 f606 	lsl.w	r6, r3, r6
 8000e0a:	4334      	orrs	r4, r6
 8000e0c:	fa23 f000 	lsr.w	r0, r3, r0
 8000e10:	4304      	orrs	r4, r0
 8000e12:	fa23 f501 	lsr.w	r5, r3, r1
 8000e16:	b2a3      	uxth	r3, r4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4660      	mov	r0, ip
 8000e1c:	f000 f85a 	bl	8000ed4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e24:	f000 f872 	bl	8000f0c <FLASH_WaitForLastOperation>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <HAL_FLASH_Program+0xdc>)
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	4a0c      	ldr	r2, [pc, #48]	@ (8000e64 <HAL_FLASH_Program+0xdc>)
 8000e32:	f023 0301 	bic.w	r3, r3, #1
 8000e36:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d107      	bne.n	8000e4e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000e3e:	7dbb      	ldrb	r3, [r7, #22]
 8000e40:	3301      	adds	r3, #1
 8000e42:	75bb      	strb	r3, [r7, #22]
 8000e44:	7dba      	ldrb	r2, [r7, #22]
 8000e46:	7d7b      	ldrb	r3, [r7, #21]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d3cd      	bcc.n	8000de8 <HAL_FLASH_Program+0x60>
 8000e4c:	e000      	b.n	8000e50 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000e4e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_FLASH_Program+0xd8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	761a      	strb	r2, [r3, #24]

  return status;
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e60:	200008d8 	.word	0x200008d8
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <HAL_FLASH_Unlock+0x40>)
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00d      	beq.n	8000e9a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_FLASH_Unlock+0x40>)
 8000e80:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_FLASH_Unlock+0x44>)
 8000e82:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_FLASH_Unlock+0x40>)
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_FLASH_Unlock+0x48>)
 8000e88:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <HAL_FLASH_Unlock+0x40>)
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000
 8000eac:	45670123 	.word	0x45670123
 8000eb0:	cdef89ab 	.word	0xcdef89ab

08000eb4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_FLASH_Lock+0x1c>)
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_FLASH_Lock+0x1c>)
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <FLASH_Program_HalfWord+0x30>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <FLASH_Program_HalfWord+0x34>)
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <FLASH_Program_HalfWord+0x34>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	887a      	ldrh	r2, [r7, #2]
 8000ef6:	801a      	strh	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200008d8 	.word	0x200008d8
 8000f08:	40022000 	.word	0x40022000

08000f0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fd2e 	bl	8000974 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f1a:	e010      	b.n	8000f3e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f22:	d00c      	beq.n	8000f3e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d007      	beq.n	8000f3a <FLASH_WaitForLastOperation+0x2e>
 8000f2a:	f7ff fd23 	bl	8000974 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d201      	bcs.n	8000f3e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e025      	b.n	8000f8a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <FLASH_WaitForLastOperation+0x88>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1e8      	bne.n	8000f1c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <FLASH_WaitForLastOperation+0x88>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <FLASH_WaitForLastOperation+0x88>)
 8000f58:	2220      	movs	r2, #32
 8000f5a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <FLASH_WaitForLastOperation+0x88>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10b      	bne.n	8000f80 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <FLASH_WaitForLastOperation+0x88>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d105      	bne.n	8000f80 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <FLASH_WaitForLastOperation+0x88>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f80:	f000 f80a 	bl	8000f98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40022000 	.word	0x40022000

08000f98 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <FLASH_SetErrorCode+0x98>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d009      	beq.n	8000fc2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <FLASH_SetErrorCode+0x9c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <FLASH_SetErrorCode+0x9c>)
 8000fb8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <FLASH_SetErrorCode+0x98>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d009      	beq.n	8000fe2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <FLASH_SetErrorCode+0x9c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <FLASH_SetErrorCode+0x9c>)
 8000fd8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <FLASH_SetErrorCode+0x98>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <FLASH_SetErrorCode+0x9c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <FLASH_SetErrorCode+0x9c>)
 8000ff8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <FLASH_SetErrorCode+0x98>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8001030 <FLASH_SetErrorCode+0x98>)
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f240 1201 	movw	r2, #257	@ 0x101
 800100c:	4293      	cmp	r3, r2
 800100e:	d106      	bne.n	800101e <FLASH_SetErrorCode+0x86>
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <FLASH_SetErrorCode+0x98>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <FLASH_SetErrorCode+0x98>)
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	61d3      	str	r3, [r2, #28]
}  
 800101c:	e002      	b.n	8001024 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800101e:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <FLASH_SetErrorCode+0x98>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	60d3      	str	r3, [r2, #12]
}  
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40022000 	.word	0x40022000
 8001034:	200008d8 	.word	0x200008d8

08001038 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800104a:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <HAL_FLASHEx_Erase+0xd0>)
 800104c:	7e1b      	ldrb	r3, [r3, #24]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_FLASHEx_Erase+0x1e>
 8001052:	2302      	movs	r3, #2
 8001054:	e053      	b.n	80010fe <HAL_FLASHEx_Erase+0xc6>
 8001056:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <HAL_FLASHEx_Erase+0xd0>)
 8001058:	2201      	movs	r2, #1
 800105a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d116      	bne.n	8001092 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001064:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001068:	f7ff ff50 	bl	8000f0c <FLASH_WaitForLastOperation>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d141      	bne.n	80010f6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 f84c 	bl	8001110 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001078:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800107c:	f7ff ff46 	bl	8000f0c <FLASH_WaitForLastOperation>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001084:	4b21      	ldr	r3, [pc, #132]	@ (800110c <HAL_FLASHEx_Erase+0xd4>)
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	4a20      	ldr	r2, [pc, #128]	@ (800110c <HAL_FLASHEx_Erase+0xd4>)
 800108a:	f023 0304 	bic.w	r3, r3, #4
 800108e:	6113      	str	r3, [r2, #16]
 8001090:	e031      	b.n	80010f6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001092:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001096:	f7ff ff39 	bl	8000f0c <FLASH_WaitForLastOperation>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d12a      	bne.n	80010f6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f04f 32ff 	mov.w	r2, #4294967295
 80010a6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	e019      	b.n	80010e4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80010b0:	68b8      	ldr	r0, [r7, #8]
 80010b2:	f000 f849 	bl	8001148 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010ba:	f7ff ff27 	bl	8000f0c <FLASH_WaitForLastOperation>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_FLASHEx_Erase+0xd4>)
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	4a11      	ldr	r2, [pc, #68]	@ (800110c <HAL_FLASHEx_Erase+0xd4>)
 80010c8:	f023 0302 	bic.w	r3, r3, #2
 80010cc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	601a      	str	r2, [r3, #0]
            break;
 80010da:	e00c      	b.n	80010f6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010e2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	029a      	lsls	r2, r3, #10
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	4413      	add	r3, r2
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3dc      	bcc.n	80010b0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <HAL_FLASHEx_Erase+0xd0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	761a      	strb	r2, [r3, #24]

  return status;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200008d8 	.word	0x200008d8
 800110c:	40022000 	.word	0x40022000

08001110 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <FLASH_MassErase+0x30>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <FLASH_MassErase+0x34>)
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <FLASH_MassErase+0x34>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <FLASH_MassErase+0x34>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <FLASH_MassErase+0x34>)
 8001130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001134:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	200008d8 	.word	0x200008d8
 8001144:	40022000 	.word	0x40022000

08001148 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <FLASH_PageErase+0x38>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <FLASH_PageErase+0x3c>)
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <FLASH_PageErase+0x3c>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001162:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <FLASH_PageErase+0x3c>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <FLASH_PageErase+0x3c>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <FLASH_PageErase+0x3c>)
 800116e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001172:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200008d8 	.word	0x200008d8
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b08b      	sub	sp, #44	@ 0x2c
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	e169      	b.n	8001470 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800119c:	2201      	movs	r2, #1
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8158 	bne.w	800146a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4a9a      	ldr	r2, [pc, #616]	@ (8001428 <HAL_GPIO_Init+0x2a0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d05e      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011c4:	4a98      	ldr	r2, [pc, #608]	@ (8001428 <HAL_GPIO_Init+0x2a0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d875      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011ca:	4a98      	ldr	r2, [pc, #608]	@ (800142c <HAL_GPIO_Init+0x2a4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d058      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011d0:	4a96      	ldr	r2, [pc, #600]	@ (800142c <HAL_GPIO_Init+0x2a4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d86f      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011d6:	4a96      	ldr	r2, [pc, #600]	@ (8001430 <HAL_GPIO_Init+0x2a8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d052      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011dc:	4a94      	ldr	r2, [pc, #592]	@ (8001430 <HAL_GPIO_Init+0x2a8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d869      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011e2:	4a94      	ldr	r2, [pc, #592]	@ (8001434 <HAL_GPIO_Init+0x2ac>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d04c      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011e8:	4a92      	ldr	r2, [pc, #584]	@ (8001434 <HAL_GPIO_Init+0x2ac>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d863      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011ee:	4a92      	ldr	r2, [pc, #584]	@ (8001438 <HAL_GPIO_Init+0x2b0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d046      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011f4:	4a90      	ldr	r2, [pc, #576]	@ (8001438 <HAL_GPIO_Init+0x2b0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d85d      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011fa:	2b12      	cmp	r3, #18
 80011fc:	d82a      	bhi.n	8001254 <HAL_GPIO_Init+0xcc>
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d859      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 8001202:	a201      	add	r2, pc, #4	@ (adr r2, 8001208 <HAL_GPIO_Init+0x80>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001283 	.word	0x08001283
 800120c:	0800125d 	.word	0x0800125d
 8001210:	0800126f 	.word	0x0800126f
 8001214:	080012b1 	.word	0x080012b1
 8001218:	080012b7 	.word	0x080012b7
 800121c:	080012b7 	.word	0x080012b7
 8001220:	080012b7 	.word	0x080012b7
 8001224:	080012b7 	.word	0x080012b7
 8001228:	080012b7 	.word	0x080012b7
 800122c:	080012b7 	.word	0x080012b7
 8001230:	080012b7 	.word	0x080012b7
 8001234:	080012b7 	.word	0x080012b7
 8001238:	080012b7 	.word	0x080012b7
 800123c:	080012b7 	.word	0x080012b7
 8001240:	080012b7 	.word	0x080012b7
 8001244:	080012b7 	.word	0x080012b7
 8001248:	080012b7 	.word	0x080012b7
 800124c:	08001265 	.word	0x08001265
 8001250:	08001279 	.word	0x08001279
 8001254:	4a79      	ldr	r2, [pc, #484]	@ (800143c <HAL_GPIO_Init+0x2b4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800125a:	e02c      	b.n	80012b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e029      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	3304      	adds	r3, #4
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e024      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	3308      	adds	r3, #8
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e01f      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	330c      	adds	r3, #12
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e01a      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800128a:	2304      	movs	r3, #4
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e013      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d105      	bne.n	80012a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001298:	2308      	movs	r3, #8
 800129a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	611a      	str	r2, [r3, #16]
          break;
 80012a2:	e009      	b.n	80012b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a4:	2308      	movs	r3, #8
 80012a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	615a      	str	r2, [r3, #20]
          break;
 80012ae:	e003      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          break;
 80012b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2bff      	cmp	r3, #255	@ 0xff
 80012bc:	d801      	bhi.n	80012c2 <HAL_GPIO_Init+0x13a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	e001      	b.n	80012c6 <HAL_GPIO_Init+0x13e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3304      	adds	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2bff      	cmp	r3, #255	@ 0xff
 80012cc:	d802      	bhi.n	80012d4 <HAL_GPIO_Init+0x14c>
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x152>
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	3b08      	subs	r3, #8
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	210f      	movs	r1, #15
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	6a39      	ldr	r1, [r7, #32]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	431a      	orrs	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80b1 	beq.w	800146a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001308:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <HAL_GPIO_Init+0x2b8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a4c      	ldr	r2, [pc, #304]	@ (8001440 <HAL_GPIO_Init+0x2b8>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b4a      	ldr	r3, [pc, #296]	@ (8001440 <HAL_GPIO_Init+0x2b8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001320:	4a48      	ldr	r2, [pc, #288]	@ (8001444 <HAL_GPIO_Init+0x2bc>)
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a40      	ldr	r2, [pc, #256]	@ (8001448 <HAL_GPIO_Init+0x2c0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d013      	beq.n	8001374 <HAL_GPIO_Init+0x1ec>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3f      	ldr	r2, [pc, #252]	@ (800144c <HAL_GPIO_Init+0x2c4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00d      	beq.n	8001370 <HAL_GPIO_Init+0x1e8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3e      	ldr	r2, [pc, #248]	@ (8001450 <HAL_GPIO_Init+0x2c8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d007      	beq.n	800136c <HAL_GPIO_Init+0x1e4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3d      	ldr	r2, [pc, #244]	@ (8001454 <HAL_GPIO_Init+0x2cc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_GPIO_Init+0x1e0>
 8001364:	2303      	movs	r3, #3
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001368:	2304      	movs	r3, #4
 800136a:	e004      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 800136c:	2302      	movs	r3, #2
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001374:	2300      	movs	r3, #0
 8001376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001386:	492f      	ldr	r1, [pc, #188]	@ (8001444 <HAL_GPIO_Init+0x2bc>)
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	492c      	ldr	r1, [pc, #176]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4928      	ldr	r1, [pc, #160]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c8:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	4922      	ldr	r1, [pc, #136]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60cb      	str	r3, [r1, #12]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	491e      	ldr	r1, [pc, #120]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4918      	ldr	r1, [pc, #96]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4914      	ldr	r1, [pc, #80]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d021      	beq.n	800145c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	490e      	ldr	r1, [pc, #56]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e021      	b.n	800146a <HAL_GPIO_Init+0x2e2>
 8001426:	bf00      	nop
 8001428:	10320000 	.word	0x10320000
 800142c:	10310000 	.word	0x10310000
 8001430:	10220000 	.word	0x10220000
 8001434:	10210000 	.word	0x10210000
 8001438:	10120000 	.word	0x10120000
 800143c:	10110000 	.word	0x10110000
 8001440:	40021000 	.word	0x40021000
 8001444:	40010000 	.word	0x40010000
 8001448:	40010800 	.word	0x40010800
 800144c:	40010c00 	.word	0x40010c00
 8001450:	40011000 	.word	0x40011000
 8001454:	40011400 	.word	0x40011400
 8001458:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_GPIO_Init+0x304>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	43db      	mvns	r3, r3
 8001464:	4909      	ldr	r1, [pc, #36]	@ (800148c <HAL_GPIO_Init+0x304>)
 8001466:	4013      	ands	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	3301      	adds	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	fa22 f303 	lsr.w	r3, r2, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	f47f ae8e 	bne.w	800119c <HAL_GPIO_Init+0x14>
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	372c      	adds	r7, #44	@ 0x2c
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e272      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8087 	beq.w	80015ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e0:	4b92      	ldr	r3, [pc, #584]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d00c      	beq.n	8001506 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ec:	4b8f      	ldr	r3, [pc, #572]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d112      	bne.n	800151e <HAL_RCC_OscConfig+0x5e>
 80014f8:	4b8c      	ldr	r3, [pc, #560]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001504:	d10b      	bne.n	800151e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	4b89      	ldr	r3, [pc, #548]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d06c      	beq.n	80015ec <HAL_RCC_OscConfig+0x12c>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d168      	bne.n	80015ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e24c      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x76>
 8001528:	4b80      	ldr	r3, [pc, #512]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a7f      	ldr	r2, [pc, #508]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e02e      	b.n	8001594 <HAL_RCC_OscConfig+0xd4>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x98>
 800153e:	4b7b      	ldr	r3, [pc, #492]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7a      	ldr	r2, [pc, #488]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b78      	ldr	r3, [pc, #480]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a77      	ldr	r2, [pc, #476]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001550:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e01d      	b.n	8001594 <HAL_RCC_OscConfig+0xd4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0xbc>
 8001562:	4b72      	ldr	r3, [pc, #456]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a71      	ldr	r2, [pc, #452]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b6f      	ldr	r3, [pc, #444]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a6e      	ldr	r2, [pc, #440]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0xd4>
 800157c:	4b6b      	ldr	r3, [pc, #428]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a6a      	ldr	r2, [pc, #424]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b68      	ldr	r3, [pc, #416]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a67      	ldr	r2, [pc, #412]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 800158e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001592:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff f9ea 	bl	8000974 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff f9e6 	bl	8000974 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	@ 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e200      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0xe4>
 80015c2:	e014      	b.n	80015ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff f9d6 	bl	8000974 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff f9d2 	bl	8000974 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	@ 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e1ec      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	4b53      	ldr	r3, [pc, #332]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x10c>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d063      	beq.n	80016c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fa:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b08      	cmp	r3, #8
 8001610:	d11c      	bne.n	800164c <HAL_RCC_OscConfig+0x18c>
 8001612:	4b46      	ldr	r3, [pc, #280]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d116      	bne.n	800164c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	4b43      	ldr	r3, [pc, #268]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_RCC_OscConfig+0x176>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d001      	beq.n	8001636 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e1c0      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001636:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4939      	ldr	r1, [pc, #228]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	e03a      	b.n	80016c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d020      	beq.n	8001696 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001654:	4b36      	ldr	r3, [pc, #216]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff f98b 	bl	8000974 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff f987 	bl	8000974 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1a1      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4927      	ldr	r1, [pc, #156]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
 8001694:	e015      	b.n	80016c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001696:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f96a 	bl	8000974 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a4:	f7ff f966 	bl	8000974 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e180      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d03a      	beq.n	8001744 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d019      	beq.n	800170a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <HAL_RCC_OscConfig+0x274>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016dc:	f7ff f94a 	bl	8000974 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff f946 	bl	8000974 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e160      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001702:	2001      	movs	r0, #1
 8001704:	f000 face 	bl	8001ca4 <RCC_Delay>
 8001708:	e01c      	b.n	8001744 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_RCC_OscConfig+0x274>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff f930 	bl	8000974 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001716:	e00f      	b.n	8001738 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff f92c 	bl	8000974 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d908      	bls.n	8001738 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e146      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	42420000 	.word	0x42420000
 8001734:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b92      	ldr	r3, [pc, #584]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e9      	bne.n	8001718 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a6 	beq.w	800189e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001756:	4b8b      	ldr	r3, [pc, #556]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b88      	ldr	r3, [pc, #544]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a87      	ldr	r2, [pc, #540]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b85      	ldr	r3, [pc, #532]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177e:	4b82      	ldr	r3, [pc, #520]	@ (8001988 <HAL_RCC_OscConfig+0x4c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d118      	bne.n	80017bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178a:	4b7f      	ldr	r3, [pc, #508]	@ (8001988 <HAL_RCC_OscConfig+0x4c8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a7e      	ldr	r2, [pc, #504]	@ (8001988 <HAL_RCC_OscConfig+0x4c8>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001796:	f7ff f8ed 	bl	8000974 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179e:	f7ff f8e9 	bl	8000974 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	@ 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e103      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	4b75      	ldr	r3, [pc, #468]	@ (8001988 <HAL_RCC_OscConfig+0x4c8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x312>
 80017c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	e02d      	b.n	800182e <HAL_RCC_OscConfig+0x36e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x334>
 80017da:	4b6a      	ldr	r3, [pc, #424]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4a69      	ldr	r2, [pc, #420]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6213      	str	r3, [r2, #32]
 80017e6:	4b67      	ldr	r3, [pc, #412]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4a66      	ldr	r2, [pc, #408]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	6213      	str	r3, [r2, #32]
 80017f2:	e01c      	b.n	800182e <HAL_RCC_OscConfig+0x36e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x356>
 80017fc:	4b61      	ldr	r3, [pc, #388]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a60      	ldr	r2, [pc, #384]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	4b5e      	ldr	r3, [pc, #376]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a5d      	ldr	r2, [pc, #372]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e00b      	b.n	800182e <HAL_RCC_OscConfig+0x36e>
 8001816:	4b5b      	ldr	r3, [pc, #364]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a5a      	ldr	r2, [pc, #360]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	4b58      	ldr	r3, [pc, #352]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a57      	ldr	r2, [pc, #348]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d015      	beq.n	8001862 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff f89d 	bl	8000974 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff f899 	bl	8000974 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0b1      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001854:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ee      	beq.n	800183e <HAL_RCC_OscConfig+0x37e>
 8001860:	e014      	b.n	800188c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7ff f887 	bl	8000974 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff f883 	bl	8000974 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e09b      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	4b40      	ldr	r3, [pc, #256]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ee      	bne.n	800186a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001892:	4b3c      	ldr	r3, [pc, #240]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a3b      	ldr	r2, [pc, #236]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8087 	beq.w	80019b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a8:	4b36      	ldr	r3, [pc, #216]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d061      	beq.n	8001978 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d146      	bne.n	800194a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018bc:	4b33      	ldr	r3, [pc, #204]	@ (800198c <HAL_RCC_OscConfig+0x4cc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff f857 	bl	8000974 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff f853 	bl	8000974 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e06d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f0:	d108      	bne.n	8001904 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018f2:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4921      	ldr	r1, [pc, #132]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a19      	ldr	r1, [r3, #32]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	430b      	orrs	r3, r1
 8001916:	491b      	ldr	r1, [pc, #108]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x4cc>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff f827 	bl	8000974 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f823 	bl	8000974 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e03d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x46a>
 8001948:	e035      	b.n	80019b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <HAL_RCC_OscConfig+0x4cc>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff f810 	bl	8000974 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f80c 	bl	8000974 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e026      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x498>
 8001976:	e01e      	b.n	80019b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e019      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
 8001984:	40021000 	.word	0x40021000
 8001988:	40007000 	.word	0x40007000
 800198c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001990:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_RCC_OscConfig+0x500>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0d0      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d910      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b67      	ldr	r3, [pc, #412]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 0207 	bic.w	r2, r3, #7
 80019ee:	4965      	ldr	r1, [pc, #404]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b63      	ldr	r3, [pc, #396]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0b8      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4b59      	ldr	r3, [pc, #356]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a58      	ldr	r2, [pc, #352]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4b53      	ldr	r3, [pc, #332]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b50      	ldr	r3, [pc, #320]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	494d      	ldr	r1, [pc, #308]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d040      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b47      	ldr	r3, [pc, #284]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d115      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b41      	ldr	r3, [pc, #260]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e073      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a92:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06b      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	4b39      	ldr	r3, [pc, #228]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f023 0203 	bic.w	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4936      	ldr	r1, [pc, #216]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab4:	f7fe ff5e 	bl	8000974 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7fe ff5a 	bl	8000974 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e053      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 020c 	and.w	r2, r3, #12
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1eb      	bne.n	8001abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d210      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 0207 	bic.w	r2, r3, #7
 8001afa:	4922      	ldr	r1, [pc, #136]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e032      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4916      	ldr	r1, [pc, #88]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	490e      	ldr	r1, [pc, #56]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b52:	f000 f821 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	490a      	ldr	r1, [pc, #40]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	5ccb      	ldrb	r3, [r1, r3]
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <HAL_RCC_ClockConfig+0x1cc>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <HAL_RCC_ClockConfig+0x1d0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe febc 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08002af8 	.word	0x08002af8
 8001b90:	20000004 	.word	0x20000004
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x30>
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x36>
 8001bc6:	e027      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bca:	613b      	str	r3, [r7, #16]
      break;
 8001bcc:	e027      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0c9b      	lsrs	r3, r3, #18
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0c5b      	lsrs	r3, r3, #17
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfa:	fb03 f202 	mul.w	r2, r3, r2
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e004      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	613b      	str	r3, [r7, #16]
      break;
 8001c16:	e002      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1a:	613b      	str	r3, [r7, #16]
      break;
 8001c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1e:	693b      	ldr	r3, [r7, #16]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	007a1200 	.word	0x007a1200
 8001c34:	08002b10 	.word	0x08002b10
 8001c38:	08002b20 	.word	0x08002b20
 8001c3c:	003d0900 	.word	0x003d0900

08001c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b02      	ldr	r3, [pc, #8]	@ (8001c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff2 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08002b08 	.word	0x08002b08

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffde 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0adb      	lsrs	r3, r3, #11
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	@ (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08002b08 	.word	0x08002b08

08001ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <RCC_Delay+0x34>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <RCC_Delay+0x38>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0a5b      	lsrs	r3, r3, #9
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cc0:	bf00      	nop
  }
  while (Delay --);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1e5a      	subs	r2, r3, #1
 8001cc6:	60fa      	str	r2, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f9      	bne.n	8001cc0 <RCC_Delay+0x1c>
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	10624dd3 	.word	0x10624dd3

08001ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e042      	b.n	8001d78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fd22 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2224      	movs	r2, #36	@ 0x24
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fdb7 	bl	8002898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d175      	bne.n	8001e8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_UART_Transmit+0x2c>
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e06e      	b.n	8001e8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2221      	movs	r2, #33	@ 0x21
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dbe:	f7fe fdd9 	bl	8000974 <HAL_GetTick>
 8001dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	88fa      	ldrh	r2, [r7, #6]
 8001dc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	88fa      	ldrh	r2, [r7, #6]
 8001dce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dd8:	d108      	bne.n	8001dec <HAL_UART_Transmit+0x6c>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d104      	bne.n	8001dec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	e003      	b.n	8001df4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001df4:	e02e      	b.n	8001e54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2180      	movs	r1, #128	@ 0x80
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 fb1c 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e03a      	b.n	8001e8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10b      	bne.n	8001e36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	3302      	adds	r3, #2
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	e007      	b.n	8001e46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3301      	adds	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1cb      	bne.n	8001df6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2200      	movs	r2, #0
 8001e66:	2140      	movs	r1, #64	@ 0x40
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fae8 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e006      	b.n	8001e8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d112      	bne.n	8001ed6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_UART_Receive_IT+0x26>
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e00b      	b.n	8001ed8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fb0f 	bl	80024f0 <UART_Start_Receive_IT>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	e000      	b.n	8001ed8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
  }
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_UART_IRQHandler+0x66>
 8001f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fbec 	bl	800271c <UART_Receive_IT>
      return;
 8001f44:	e25b      	b.n	80023fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80de 	beq.w	800210c <HAL_UART_IRQHandler+0x22c>
 8001f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d106      	bne.n	8001f6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80d1 	beq.w	800210c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_UART_IRQHandler+0xae>
 8001f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_UART_IRQHandler+0xd2>
 8001f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f043 0202 	orr.w	r2, r3, #2
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_UART_IRQHandler+0xf6>
 8001fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f043 0204 	orr.w	r2, r3, #4
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d011      	beq.n	8002006 <HAL_UART_IRQHandler+0x126>
 8001fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f043 0208 	orr.w	r2, r3, #8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 81f2 	beq.w	80023f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_UART_IRQHandler+0x14e>
 800201c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fb77 	bl	800271c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <HAL_UART_IRQHandler+0x17a>
 8002052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d04f      	beq.n	80020fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fa81 	bl	8002562 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d041      	beq.n	80020f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3314      	adds	r3, #20
 8002074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002078:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800207c:	e853 3f00 	ldrex	r3, [r3]
 8002080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800208c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3314      	adds	r3, #20
 8002096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800209a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800209e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80020a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80020aa:	e841 2300 	strex	r3, r2, [r1]
 80020ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80020b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1d9      	bne.n	800206e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d013      	beq.n	80020ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c6:	4a7e      	ldr	r2, [pc, #504]	@ (80022c0 <HAL_UART_IRQHandler+0x3e0>)
 80020c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fde2 	bl	8000c98 <HAL_DMA_Abort_IT>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d016      	beq.n	8002108 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020e4:	4610      	mov	r0, r2
 80020e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e8:	e00e      	b.n	8002108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f993 	bl	8002416 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f0:	e00a      	b.n	8002108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f98f 	bl	8002416 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f8:	e006      	b.n	8002108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f98b 	bl	8002416 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002106:	e175      	b.n	80023f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	bf00      	nop
    return;
 800210a:	e173      	b.n	80023f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	2b01      	cmp	r3, #1
 8002112:	f040 814f 	bne.w	80023b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8148 	beq.w	80023b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8141 	beq.w	80023b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80b6 	beq.w	80022c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8145 	beq.w	80023f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002176:	429a      	cmp	r2, r3
 8002178:	f080 813e 	bcs.w	80023f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002182:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b20      	cmp	r3, #32
 800218c:	f000 8088 	beq.w	80022a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	330c      	adds	r3, #12
 8002196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800219e:	e853 3f00 	ldrex	r3, [r3]
 80021a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80021a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	330c      	adds	r3, #12
 80021b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80021bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80021c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80021c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021cc:	e841 2300 	strex	r3, r2, [r1]
 80021d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80021d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1d9      	bne.n	8002190 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3314      	adds	r3, #20
 80021e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021e6:	e853 3f00 	ldrex	r3, [r3]
 80021ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80021ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3314      	adds	r3, #20
 80021fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002200:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002204:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002206:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002208:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e1      	bne.n	80021dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3314      	adds	r3, #20
 800221e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002222:	e853 3f00 	ldrex	r3, [r3]
 8002226:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800222a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800222e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3314      	adds	r3, #20
 8002238:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800223c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800223e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002240:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002242:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002244:	e841 2300 	strex	r3, r2, [r1]
 8002248:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800224a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e3      	bne.n	8002218 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	330c      	adds	r3, #12
 8002264:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002268:	e853 3f00 	ldrex	r3, [r3]
 800226c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800226e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002270:	f023 0310 	bic.w	r3, r3, #16
 8002274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	330c      	adds	r3, #12
 800227e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002282:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002284:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800228a:	e841 2300 	strex	r3, r2, [r1]
 800228e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e3      	bne.n	800225e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fcc1 	bl	8000c22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8b6 	bl	8002428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022bc:	e09c      	b.n	80023f8 <HAL_UART_IRQHandler+0x518>
 80022be:	bf00      	nop
 80022c0:	08002627 	.word	0x08002627
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 808e 	beq.w	80023fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8089 	beq.w	80023fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f4:	e853 3f00 	ldrex	r3, [r3]
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80022fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	330c      	adds	r3, #12
 800230a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800230e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002310:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002312:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002316:	e841 2300 	strex	r3, r2, [r1]
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800231c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e3      	bne.n	80022ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3314      	adds	r3, #20
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	e853 3f00 	ldrex	r3, [r3]
 8002330:	623b      	str	r3, [r7, #32]
   return(result);
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3314      	adds	r3, #20
 8002342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002346:	633a      	str	r2, [r7, #48]	@ 0x30
 8002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800234c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800234e:	e841 2300 	strex	r3, r2, [r1]
 8002352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1e3      	bne.n	8002322 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	330c      	adds	r3, #12
 800236e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	e853 3f00 	ldrex	r3, [r3]
 8002376:	60fb      	str	r3, [r7, #12]
   return(result);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f023 0310 	bic.w	r3, r3, #16
 800237e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	330c      	adds	r3, #12
 8002388:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800238c:	61fa      	str	r2, [r7, #28]
 800238e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002390:	69b9      	ldr	r1, [r7, #24]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	e841 2300 	strex	r3, r2, [r1]
 8002398:	617b      	str	r3, [r7, #20]
   return(result);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e3      	bne.n	8002368 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f83b 	bl	8002428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023b2:	e023      	b.n	80023fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_UART_IRQHandler+0x4f4>
 80023c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f93e 	bl	800264e <UART_Transmit_IT>
    return;
 80023d2:	e014      	b.n	80023fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <HAL_UART_IRQHandler+0x51e>
 80023e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f97d 	bl	80026ec <UART_EndTransmit_IT>
    return;
 80023f2:	e004      	b.n	80023fe <HAL_UART_IRQHandler+0x51e>
    return;
 80023f4:	bf00      	nop
 80023f6:	e002      	b.n	80023fe <HAL_UART_IRQHandler+0x51e>
      return;
 80023f8:	bf00      	nop
 80023fa:	e000      	b.n	80023fe <HAL_UART_IRQHandler+0x51e>
      return;
 80023fc:	bf00      	nop
  }
}
 80023fe:	37e8      	adds	r7, #232	@ 0xe8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800244e:	e03b      	b.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d037      	beq.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7fe fa8c 	bl	8000974 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	6a3a      	ldr	r2, [r7, #32]
 8002464:	429a      	cmp	r2, r3
 8002466:	d302      	bcc.n	800246e <UART_WaitOnFlagUntilTimeout+0x30>
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e03a      	b.n	80024e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d023      	beq.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b80      	cmp	r3, #128	@ 0x80
 8002484:	d020      	beq.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b40      	cmp	r3, #64	@ 0x40
 800248a:	d01d      	beq.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b08      	cmp	r3, #8
 8002498:	d116      	bne.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f856 	bl	8002562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2208      	movs	r2, #8
 80024ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e00f      	b.n	80024e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4013      	ands	r3, r2
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d0b4      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2222      	movs	r2, #34	@ 0x22
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002534:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0220 	orr.w	r2, r2, #32
 8002554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002562:	b480      	push	{r7}
 8002564:	b095      	sub	sp, #84	@ 0x54
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002574:	e853 3f00 	ldrex	r3, [r3]
 8002578:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800257a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800258a:	643a      	str	r2, [r7, #64]	@ 0x40
 800258c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002592:	e841 2300 	strex	r3, r2, [r1]
 8002596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e5      	bne.n	800256a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3314      	adds	r3, #20
 80025a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	e853 3f00 	ldrex	r3, [r3]
 80025ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3314      	adds	r3, #20
 80025bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025c6:	e841 2300 	strex	r3, r2, [r1]
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e5      	bne.n	800259e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d119      	bne.n	800260e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	e853 3f00 	ldrex	r3, [r3]
 80025e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f023 0310 	bic.w	r3, r3, #16
 80025f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	330c      	adds	r3, #12
 80025f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025fa:	61ba      	str	r2, [r7, #24]
 80025fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fe:	6979      	ldr	r1, [r7, #20]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	613b      	str	r3, [r7, #16]
   return(result);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e5      	bne.n	80025da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800261c:	bf00      	nop
 800261e:	3754      	adds	r7, #84	@ 0x54
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fee8 	bl	8002416 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b21      	cmp	r3, #33	@ 0x21
 8002660:	d13e      	bne.n	80026e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800266a:	d114      	bne.n	8002696 <UART_Transmit_IT+0x48>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d110      	bne.n	8002696 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002688:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	1c9a      	adds	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	621a      	str	r2, [r3, #32]
 8002694:	e008      	b.n	80026a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6211      	str	r1, [r2, #32]
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4619      	mov	r1, r3
 80026b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10f      	bne.n	80026dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002702:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fe79 	bl	8002404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	@ 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b22      	cmp	r3, #34	@ 0x22
 800272e:	f040 80ae 	bne.w	800288e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800273a:	d117      	bne.n	800276c <UART_Receive_IT+0x50>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d113      	bne.n	800276c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	b29b      	uxth	r3, r3
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	b29a      	uxth	r2, r3
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	1c9a      	adds	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	629a      	str	r2, [r3, #40]	@ 0x28
 800276a:	e026      	b.n	80027ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277e:	d007      	beq.n	8002790 <UART_Receive_IT+0x74>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <UART_Receive_IT+0x82>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d106      	bne.n	800279e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e008      	b.n	80027b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4619      	mov	r1, r3
 80027c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d15d      	bne.n	800288a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0220 	bic.w	r2, r2, #32
 80027dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002810:	2b01      	cmp	r3, #1
 8002812:	d135      	bne.n	8002880 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	613b      	str	r3, [r7, #16]
   return(result);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f023 0310 	bic.w	r3, r3, #16
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283a:	623a      	str	r2, [r7, #32]
 800283c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	69f9      	ldr	r1, [r7, #28]
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	61bb      	str	r3, [r7, #24]
   return(result);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e5      	bne.n	800281a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b10      	cmp	r3, #16
 800285a:	d10a      	bne.n	8002872 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fdd5 	bl	8002428 <HAL_UARTEx_RxEventCallback>
 800287e:	e002      	b.n	8002886 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fd fdf5 	bl	8000470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e002      	b.n	8002890 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3730      	adds	r7, #48	@ 0x30
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80028d2:	f023 030c 	bic.w	r3, r3, #12
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	430b      	orrs	r3, r1
 80028de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2c      	ldr	r2, [pc, #176]	@ (80029ac <UART_SetConfig+0x114>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d103      	bne.n	8002908 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002900:	f7ff f9bc 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	e002      	b.n	800290e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002908:	f7ff f9a4 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 800290c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	4a22      	ldr	r2, [pc, #136]	@ (80029b0 <UART_SetConfig+0x118>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	0119      	lsls	r1, r3, #4
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	009a      	lsls	r2, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	fbb2 f2f3 	udiv	r2, r2, r3
 8002944:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <UART_SetConfig+0x118>)
 8002946:	fba3 0302 	umull	r0, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2064      	movs	r0, #100	@ 0x64
 800294e:	fb00 f303 	mul.w	r3, r0, r3
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	3332      	adds	r3, #50	@ 0x32
 8002958:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <UART_SetConfig+0x118>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002964:	4419      	add	r1, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009a      	lsls	r2, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fbb2 f2f3 	udiv	r2, r2, r3
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <UART_SetConfig+0x118>)
 800297e:	fba3 0302 	umull	r0, r3, r3, r2
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2064      	movs	r0, #100	@ 0x64
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	3332      	adds	r3, #50	@ 0x32
 8002990:	4a07      	ldr	r2, [pc, #28]	@ (80029b0 <UART_SetConfig+0x118>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	f003 020f 	and.w	r2, r3, #15
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	440a      	add	r2, r1
 80029a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40013800 	.word	0x40013800
 80029b0:	51eb851f 	.word	0x51eb851f

080029b4 <memset>:
 80029b4:	4603      	mov	r3, r0
 80029b6:	4402      	add	r2, r0
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d100      	bne.n	80029be <memset+0xa>
 80029bc:	4770      	bx	lr
 80029be:	f803 1b01 	strb.w	r1, [r3], #1
 80029c2:	e7f9      	b.n	80029b8 <memset+0x4>

080029c4 <__libc_init_array>:
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	2600      	movs	r6, #0
 80029c8:	4d0c      	ldr	r5, [pc, #48]	@ (80029fc <__libc_init_array+0x38>)
 80029ca:	4c0d      	ldr	r4, [pc, #52]	@ (8002a00 <__libc_init_array+0x3c>)
 80029cc:	1b64      	subs	r4, r4, r5
 80029ce:	10a4      	asrs	r4, r4, #2
 80029d0:	42a6      	cmp	r6, r4
 80029d2:	d109      	bne.n	80029e8 <__libc_init_array+0x24>
 80029d4:	f000 f81a 	bl	8002a0c <_init>
 80029d8:	2600      	movs	r6, #0
 80029da:	4d0a      	ldr	r5, [pc, #40]	@ (8002a04 <__libc_init_array+0x40>)
 80029dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002a08 <__libc_init_array+0x44>)
 80029de:	1b64      	subs	r4, r4, r5
 80029e0:	10a4      	asrs	r4, r4, #2
 80029e2:	42a6      	cmp	r6, r4
 80029e4:	d105      	bne.n	80029f2 <__libc_init_array+0x2e>
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ec:	4798      	blx	r3
 80029ee:	3601      	adds	r6, #1
 80029f0:	e7ee      	b.n	80029d0 <__libc_init_array+0xc>
 80029f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f6:	4798      	blx	r3
 80029f8:	3601      	adds	r6, #1
 80029fa:	e7f2      	b.n	80029e2 <__libc_init_array+0x1e>
 80029fc:	08002b2c 	.word	0x08002b2c
 8002a00:	08002b2c 	.word	0x08002b2c
 8002a04:	08002b2c 	.word	0x08002b2c
 8002a08:	08002b30 	.word	0x08002b30

08002a0c <_init>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr

08002a18 <_fini>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	bf00      	nop
 8002a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1e:	bc08      	pop	{r3}
 8002a20:	469e      	mov	lr, r3
 8002a22:	4770      	bx	lr
